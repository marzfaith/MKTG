getwd()
?mtcars
knitr::opts_chunk$set(echo = TRUE)
# number of rows
nrow(mtcars)
# number of columns
ncol(mtcars)
summary(mtcars)
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$hp, xlab="MPG", ylab='Horsepower")
plot(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$hp, xlab = "MPG", ylab = "Horsepower")
devtools::install_github("patilv/gozagsdatavizsp20",auth_token="e6296e48019cc47a624bff2e9826d3a2dc0cde85",force = TRUE)
gozagsdatavizsp20::opendatavizhome()
library(tidyverse)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
table1
#> # A tibble: 6 x 4
#>   country      year  cases population
#>   <chr>       <int>  <int>      <int>
#> 1 Afghanistan  1999    745   19987071
#> 2 Afghanistan  2000   2666   20595360
#> 3 Brazil       1999  37737  172006362
#> 4 Brazil       2000  80488  174504898
#> 5 China        1999 212258 1272915272
#> 6 China        2000 213766 1280428583
table2
#> # A tibble: 12 x 4
#>   country      year type           count
#>   <chr>       <int> <chr>          <int>
#> 1 Afghanistan  1999 cases            745
#> 2 Afghanistan  1999 population  19987071
#> 3 Afghanistan  2000 cases           2666
#> 4 Afghanistan  2000 population  20595360
#> 5 Brazil       1999 cases          37737
#> 6 Brazil       1999 population 172006362
#> # … with 6 more rows
table3
#> # A tibble: 6 x 3
#>   country      year rate
#> * <chr>       <int> <chr>
#> 1 Afghanistan  1999 745/19987071
#> 2 Afghanistan  2000 2666/20595360
#> 3 Brazil       1999 37737/172006362
#> 4 Brazil       2000 80488/174504898
#> 5 China        1999 212258/1272915272
#> 6 China        2000 213766/1280428583
# Spread across two tibbles
table4a  # cases
#> # A tibble: 3 x 3
#>   country     `1999` `2000`
#> * <chr>        <int>  <int>
#> 1 Afghanistan    745   2666
#> 2 Brazil       37737  80488
#> 3 China       212258 213766
table4b  # population
#> # A tibble: 3 x 3
#>   country         `1999`     `2000`
#> * <chr>            <int>      <int>
#> 1 Afghanistan   19987071   20595360
#> 2 Brazil       172006362  174504898
#> 3 China       1272915272 1280428583
# Compute rate per 10,000
table1 %>%
mutate(rate = cases / population * 10000)
#> # A tibble: 6 x 5
#>   country      year  cases population  rate
#>   <chr>       <int>  <int>      <int> <dbl>
#> 1 Afghanistan  1999    745   19987071 0.373
#> 2 Afghanistan  2000   2666   20595360 1.29
#> 3 Brazil       1999  37737  172006362 2.19
#> 4 Brazil       2000  80488  174504898 4.61
#> 5 China        1999 212258 1272915272 1.67
#> 6 China        2000 213766 1280428583 1.67
# Compute cases per year
table1 %>%
count(year, wt = cases)
#> # A tibble: 2 x 2
#>    year      n
#>   <int>  <int>
#> 1  1999 250740
#> 2  2000 296920
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
nycflights13::flights
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
table1
table2
#> # A tibble: 12 x 4
#>   country      year type           count
#>   <chr>       <int> <chr>          <int>
#> 1 Afghanistan  1999 cases            745
#> 2 Afghanistan  1999 population  19987071
#> 3 Afghanistan  2000 cases           2666
#> 4 Afghanistan  2000 population  20595360
#> 5 Brazil       1999 cases          37737
#> 6 Brazil       1999 population 172006362
#> # … with 6 more rows
table3
#> # A tibble: 6 x 3
#>   country      year rate
#> * <chr>       <int> <chr>
#> 1 Afghanistan  1999 745/19987071
#> 2 Afghanistan  2000 2666/20595360
#> 3 Brazil       1999 37737/172006362
#> 4 Brazil       2000 80488/174504898
#> 5 China        1999 212258/1272915272
#> 6 China        2000 213766/1280428583
# Spread across two tibbles
table4a  # cases
#> # A tibble: 3 x 3
#>   country     `1999` `2000`
#> * <chr>        <int>  <int>
#> 1 Afghanistan    745   2666
#> 2 Brazil       37737  80488
#> 3 China       212258 213766
table4b  # population
#> # A tibble: 3 x 3
#>   country         `1999`     `2000`
#> * <chr>            <int>      <int>
#> 1 Afghanistan   19987071   20595360
#> 2 Brazil       172006362  174504898
#> 3 China       1272915272 1280428583
table1
table2
table3
table4a
table4b
# runs the tables
table1
table2
table3
table4a
table4b
# Compute rate per 10,000
table1 %>%
mutate(rate = cases / population * 10000)
# Compute cases per year
table1 %>%
count(year, wt = cases)
table4a %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
table4a
# Tidying table 4b by using pivot_longer
table4b %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "population")
# Combines the tidied table4a and table4b
tidy4a <- table4a %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
tidy4b <- table4b %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "population")
left_join(tidy4a, tidy4b)
table2
setwd("~/Desktop/MKTG420/Analysis")
knitr::opts_chunk$set(echo = TRUE)
read_excel("diamonds.xlsx")
library(readxl)
read_excel("diamonds.xlsx")
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
getwd()
library(readxl)
mydiamonds<-read_excel('diamonds.xlsx')
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
setwd("~/Desktop/MKTG420/Analysis")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
library(readxl)
mydiamonds<-read_excel("diamonds.xlsx")
# Names of columns
```{r}
names(mydiamonds)
```
# shows top 6 observations
head(mydiamonds)
str(mydiamonds)
mydiamonds$pricetable = mydiamonds$price + mydiamonds$table
summary(mydiamonds$pricetable)
mydiamonds$pricetable <- mydiamonds$price + mydiamonds$table
summary(mydiamonds$pricetable)
head(mydiamonds)
# Summarize the variable
```{r}
#summary(mydiamonds$pricetable)
head(mydiamonds$pricetable)
summary(mydiamonds$pricetable)
knitr::opts_chunk$set(echo = TRUE)
filter(flights, month == 11 | month == 12)
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(tidyverse)
nycflights13::flights
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
filter(flights, month == 11 | month == 12)
knitr::opts_chunk$set(echo = TRUE)
NA>5
#### 5.2.3 Missing Values
NA represents an unknown value
```{r}
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
```
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(tidyverse)
nycflights13::flights
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
# Finds all flights departed in November or December
filter(flights, month == 11 | month == 12)
# Shorthand for the code above
nov_dec <- filter(flights, month %in% c(11, 12))
# Simplifed complicated subsetting by rem
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df, is.na(x) | x > 1)
filter(flights, arr_delay >= 2)
# 2. Flew to Houston (IAH to HOU)
filter(flights, origin == 'IAH', dest == 'HOU')
# 2. Flew to Houston (IAH to HOU)
filter(flights, origin == IAH, dest == HOU)
# 2. Flew to Houston (IAH to HOU)
filter(flights, origin = 'IAH', dest = 'HOU')
# 2. Flew to Houston (IAH to HOU)
filter(flights, origin == 'IAH', dest == 'HOU')
# 1.3 Were operated by United, American, or Delta
filter(flights, carrier =='UA' | carrier == 'AA' | carrier == 'DL')
```{r}
# 1.4 Departed in Summer (July(7), August(8), September(9))
filter(flights, month == 7 | month == 8 | month == 9)
# 1.5 Arrived more than 2 hours late, but didn't leave late
filter(flights, arr_delay >= 2, dep_delay == 0)
# 1.6 Were delayed by at least an hour, but made up over 30 mins in flight
filter(flights, dep_delay >= 1, arr_delay <= 30)
# 1.1 Had an arrival delay of two or more hours
filter(flights, arr_delay >= 120)
# 1.5 Arrived more than 2 hours late, but didn't leave late
filter(flights, arr_delay >= 120, dep_delay == 0)
# 1.6 Were delayed by at least an hour, but made up over 30 mins in flight
filter(flights, dep_delay >= 60, arr_delay <= 30)
# 1.7 Departed between midnight and 6am (inclusive)
filter(flights, dep_time >= 2400 | dep_time <= 600)
# 1.7 Departed between midnight and 6am (inclusive)
filter(flights, dep_time >= 2400 | dep_time <= 600)
#The between() function finds the flights that occur between two variables, such as in problem 1.7.
filter(flights, between(dep_time, 601, 2359))
# 1.7 Departed between midnight and 6am (inclusive)
filter(flights, dep_time >= 2400,  dep_time <= 600)
# 1.7 Departed between midnight and 6am (inclusive)
filter(flights, dep_time >= 2400 | dep_time <= 600)
#The between() function finds the flights that occur between two variables, such as in problem 1.7.
filter(flights, between(dep_time, 001, 599))
knitr::opts_chunk$set(echo = TRUE)
#The between() function finds the flights that occur between the variables, such as the summer months in problem 1.4.
filter(flights, between(month, 7,9))
knitr::opts_chunk$set(echo = TRUE)
library(nycflights13)
library(tidyverse)
nycflights13::flights
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
# Finds all flights departed in November or December
filter(flights, month == 11 | month == 12)
# Shorthand for the code above
nov_dec <- filter(flights, month %in% c(11, 12))
# Simplifed complicated subsetting by rem
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
#this showcases both the FALSE and NA values explicitly
filter(df, is.na(x) | x > 1)
# 1.1 Had an arrival delay of two or more hours
filter(flights, arr_delay >= 120)
# 1.2 Flew to Houston (IAH to HOU)
filter(flights, origin == "IAH", dest == "HOU")
# 1.3 Were operated by United, American, or Delta
filter(flights, carrier %in% c("UA","AA","DL"))
# 1.4 Departed in Summer (July(7), August(8), September(9))
filter(flights, month %in% 7:9)
# 1.5 Arrived more than 2 hours late, but didn't leave late
filter(flights, arr_delay > 120, dep_delay <= 0)
# 1.6 Were delayed by at least an hour, but made up over 30 mins in flight
filter(flights, dep_delay >= 60, dep_delay - arr_delay > 30)
# 1.7 Departed between midnight and 6am (inclusive)
filter(flights, dep_time >= 2400 | dep_time <= 600)
# 2. Another usful dplyr filtering helper is between(). What does it do? Can you use it simplify the code needed to answer the previous challenge?
#The between() function finds the flights that occur between the variables, such as the summer months in problem 1.4.
filter(flights, between(month, 7,9))
#3 How many flights have a missing dep_time? What other variables are missing? What might these rows represent?
#3 How many flights have a missing dep_time? What other variables are missing? What might these rows represent?
filter(flights, is.na(dep_time))
NA ^ 0
NA | TRUE
NA & FALSE
arrange(flights, year, month, day)
```{r}
arrange(flights, desc(dep_delay))
arrange(df, x)
#missing values are sorted at the end
df <- tibble(x = c(5, 2, NA))
arrange(df, desc(x))
#1 How could you use arrange() to sort all missing values to the start?
arrange(flights, desc(is.na(dep_time)), dep_time)
#most dealyed
arrange(flights, desc(dep_delay))
#left earliest
arrange(flights, dep_delay)
#3 Sort flights to find the fastest(highest speed) flights.
arrange(flights, air_time)
# travelled the shortest
arrange(flights, distance)
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, year, month, month)
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
select(flights, contains("TIME"))
